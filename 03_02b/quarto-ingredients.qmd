---
title: Palmer Penguins Report
format:
  html:
    code-fold: true
    code-summary: "Show the code"
---
```{python}
from palmerpenguins import load_penguins
import pandas as pd
import numpy as np
pd.options.mode.chained_assignment = None

penguins = load_penguins()
penguins_cleaned = penguins.dropna()

selected_features = ["bill_length_mm", "flipper_length_mm"]
```

The *palmer penguins* dataset contains information about `{python} len(penguins)` penguins, after **discarding** rows with NA values there are `{python} len(penguins_cleaned)` penguins left.



```{python}
penguins_cleaned.head()
```

The penguins are differentiated by both island and species, but there is clearer clustering by species when looking at the variables: `bill_length_mm` and `flipper_length_mm`.

::: {.panel-tabset}

### Island

```{python}
(
    ggplot(penguins_cleaned, aes(selected_features[0],
           "flipper_length_mm", color="factor(island)"))
    + geom_point()
)
```

### Sex

```{python}
(
    ggplot(penguins_cleaned, aes(selected_features[0],
           "flipper_length_mm", color="factor(sex)"))
    + geom_point()
)
```

### Species

```{python}
(
    ggplot(penguins_cleaned, aes("bill_length_mm",
           "flipper_length_mm", color="factor(species)"))
    + geom_point()
)
```

:::

## KMeans clustering

```{python}
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

features = penguins_cleaned.loc[:, selected_features]

scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

kmeans = KMeans(n_clusters=3)
```

```{python}
penguin_predictions = kmeans.fit_predict(features_scaled)
penguins_cleaned.loc[:, "cluster"] = penguin_predictions

cluster_species = penguins_cleaned.groupby(
    "species")["cluster"].agg(lambda x: x.value_counts().index[0])

cluster_species_df = cluster_species.reset_index()

penguins_cleaned['cluster'] = penguins_cleaned['cluster'].astype(str)
cluster_species_df['cluster'] = cluster_species_df['cluster'].astype(str)

penguins_cleaned.loc[:, "cluster"] = penguins_cleaned["cluster"].map(
    cluster_species_df.set_index("cluster")["species"])

cols_compare = ["species",
                "cluster", "bill_length_mm", "flipper_length_mm"]
penguins_selected = penguins_cleaned[cols_compare]

penguins_selected = penguins_selected.rename(columns={
    "species": "actual_species", "cluster": "predicted_species"})

penguins_crosstabbed = pd.crosstab(penguins_selected['predicted_species'],
                                   penguins_selected['actual_species'])

penguins_crosstabbed_mismatch = penguins_crosstabbed.copy(deep=True)

np.fill_diagonal(penguins_crosstabbed_mismatch.values, 0)


```

Out of `{python} penguins_crosstabbed.sum().sum().item()` penguins, our model misclassified only `{python} round(penguins_crosstabbed_mismatch.sum().sum().item() / penguins_crosstabbed.sum().sum().item(), 2) * 100`% of the penguins.

```{python}
penguins_clust_long = pd.melt(penguins_selected,
                              id_vars=["bill_length_mm", "flipper_length_mm"],
                              var_name="measure",
                              value_name="group")

(
    ggplot(penguins_clust_long, aes("bill_length_mm",
           "flipper_length_mm", color="factor(group)"))
    + geom_point()
    + facet_wrap("measure")
)
```

